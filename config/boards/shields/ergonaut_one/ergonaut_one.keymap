/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF  0
#define LWR  1
#define RSE  2

#undef U_MOUSE_MOVE_MAX
#undef U_MOUSE_SCROLL_MAX

#define U_MOUSE_MOVE_MAX 1400
#define U_MOUSE_SCROLL_MAX 35

#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCROLL_HOR(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCROLL_HOR(U_MOUSE_SCROLL_MAX)



#define MM_MTC(name, keycode) \
            name: name { \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_MACRO_STRINGIFY(MMMTC_ ## name); \
                #binding-cells = <0>; \
                bindings = <&kp keycode>, <&kp RC(keycode)>; \
                mods = <(MOD_LGUI)>; \
            };

#define MM_LGUI(name, regular_binding, morph_binding) \
            name: name { \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_MACRO_STRINGIFY(MMLG_ ## name); \
                #binding-cells = <0>; \
                bindings = regular_binding, morph_binding; \
                mods = <(MOD_LGUI)>; \
            };

#define MM_LSFT(name, regular_binding, morph_binding) \
            name: name { \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_MACRO_STRINGIFY(MMSH_ ## name); \
                #binding-cells = <0>; \
                bindings = regular_binding, morph_binding; \
                mods = <(MOD_LSFT)>; \
            };

#define MM_LALT(name, regular_binding, morph_binding) \
            name: name { \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_MACRO_STRINGIFY(MMLG_ ## name); \
                #binding-cells = <0>; \
                bindings = regular_binding, morph_binding; \
                mods = <(MOD_LALT)>; \
            };

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
        // zmk,matrix_transform = &five_column_transform;
     };
};

&mmv {
    time-to-max-speed-ms = <80>;
    acceleration-exponent = <1>;
};

&mwh {
    time-to-max-speed-ms = <0>;
    acceleration-exponent = <1>;
};

&lt { quick_tap_ms = <200>; };
&mt { quick_tap_ms = <200>; };

/ {
        behaviors {
        mkp_ht: mkp_layer_hold_tap {
                        compatible = "zmk,behavior-hold-tap";
                        label = "MKP_LAYER_HOLD_TAP";
                        #binding-cells = <2>;
                        flavor = "tap-preferred";
                        tapping-term-ms = <200>;
                                bindings = <&kp>, <&mkp>;
                };


        MM_MTC(mc_a, A)
        MM_MTC(mc_b, B)
        MM_MTC(mc_c, C)
        MM_MTC(mc_d, D)
        MM_MTC(mc_e, E)
        MM_MTC(mc_f, F)
        MM_MTC(mc_g, G)
        MM_MTC(mc_h, H)
        MM_MTC(mc_i, I)
        MM_MTC(mc_j, J)
        MM_MTC(mc_k, K)
        MM_MTC(mc_l, L)
        MM_MTC(mc_m, M)
        MM_MTC(mc_n, N)
        MM_MTC(mc_o, O)
        MM_MTC(mc_p, P)
        MM_MTC(mc_q, Q)
        MM_MTC(mc_r, R)
        MM_MTC(mc_s, S)
        MM_MTC(mc_t, T)
        MM_MTC(mc_u, U)
        MM_MTC(mc_v, V)
        MM_MTC(mc_w, W)
        MM_MTC(mc_x, X)
        MM_MTC(mc_y, Y)
        MM_MTC(mc_z, Z)
        MM_MTC(mc_n1, N1)
        MM_MTC(mc_n2, N2)
        MM_MTC(mc_n3, N3)
        MM_MTC(mc_n4, N4)
        MM_MTC(mc_n5, N5)
        MM_MTC(mc_n6, N6)
        MM_MTC(mc_n7, N7)
        MM_MTC(mc_n8, N8)
        MM_MTC(mc_n9, N9)
        MM_MTC(mc_n0, N0)
        MM_MTC(mc_at, AT)
        MM_MTC(mc_tilde, TILDE)
        MM_MTC(mc_amps, AMPS)
        MM_MTC(mc_pipe, PIPE)
        MM_MTC(mc_comma, COMMA)
        MM_MTC(mc_qmark, QMARK)
        MM_MTC(mc_plus, PLUS)
        MM_MTC(mc_minus, MINUS)
        MM_MTC(mc_equal, EQUAL)
        MM_MTC(mc_star, STAR)

        MM_LGUI(mm_up, <&mmv MOVE_UP>, <&mwh SCROLL_UP>)
        MM_LGUI(mm_down, <&mmv MOVE_DOWN>, <&mwh SCROLL_DOWN>)
        MM_LGUI(mm_left, <&mmv MOVE_LEFT>, <&mwh SCROLL_LEFT>)
        MM_LGUI(mm_right, <&mmv MOVE_RIGHT>, <&mwh SCROLL_RIGHT>)

        MM_LSFT(up, <&kp UP>, <&kp PG_UP>)
        MM_LSFT(down, <&kp DOWN>, <&kp PG_DN>)
        MM_LSFT(left, <&kp LEFT>, <&kp HOME>)
        MM_LSFT(right, <&kp RIGHT>, <&kp END>)

        MM_LSFT(rpar_brc, <&kp RPAR>, <&kp RBRC>)
        MM_LSFT(lpar_brc, <&kp LPAR>, <&kp LBRC>)
        MM_LSFT(lbkt_lt, <&kp LBKT>, <&kp LT>)
        MM_LSFT(rbkt_gt, <&kp RBKT>, <&kp GT>)
        MM_LSFT(apos_grave, <&kp APOS>, <&kp GRAVE>)

        MM_LSFT(comma_qmark, <&mc_comma>, <&mc_qmark>)
        MM_LSFT(dot_excl, <&kp DOT>, <&kp EXCL>)
        MM_LSFT(under_at, <&kp UNDER>, <&kp AT>)
        MM_LSFT(fslh_bslh, <&kp FSLH>, <&kp BSLH>)


        MM_LSFT(colon_semi, <&kp COLON>, <&kp SEMI>)
        MM_LSFT(dllr_caret, <&kp DLLR>, <&kp CARET>)
        MM_LSFT(amps_pipe, <&kp AMPS>, <&kp PIPE>)
        MM_LSFT(prcnt_hash, <&kp PRCNT>, <&kp HASH>)
        };
        keymap {
                compatible = "zmk,keymap";
                default_layer {
			label = "main";
                        bindings = <
          &none       &none          &mc_w         &mc_f         &mc_p          &mc_g           &mc_j           &mc_l              &mc_u            &mc_y              &none            &none
          &mc_z       &mc_q          &mc_r         &mc_s         &mc_t          &mc_d           &mc_h           &mc_n              &mc_e            &mc_o              &mc_k            &under_at
          &mc_b       &mc_a          &mc_x         &mc_c         &mc_v          &none           &none           &mc_m              &comma_qmark     &dot_excl          &mc_i            &fslh_bslh
                                                   &none         &mt LSHFT BSPC &lt RSE SPACE   &lt LWR RET     &mt LMETA ESC      &none
                        >;
                };

		lower_layer {
			label = "lower";
                        bindings = <
          &trans      &trans         &mc_n2        &mc_n3        &mc_n4         &mc_n5          &amps_pipe      &apos_grave        &up              &kp DQT            &trans           &trans
          &colon_semi &mc_n1         &mc_n7        &mc_n8        &mc_n9         &mc_n0          &dllr_caret     &left              &down            &right             &mc_plus         &mc_equal
          &kp TAB     &mc_n6         &prcnt_hash   &lpar_brc     &rpar_brc      &trans          &trans          &lbkt_lt           &rbkt_gt         &kp TILDE          &mc_minus        &mc_star
                                                   &trans        &mt LSHFT DEL  &mt LMETA SPACE &trans          &tog RSE           &trans           &trans
                        >;
                };
                raise_layer {
			label = "higher";
                        bindings = <
          &trans      &trans         &kp F2        &kp F3        &kp F4         &kp F5          &trans          &trans             &mm_up          &trans             &trans           &trans
          &trans      &kp F1         &kp F7        &kp F8        &mt LMETA F9   &kp F10         &trans          &mm_left           &mm_down        &mm_right          &kp C_VOL_UP     &kp C_BRI_UP
          &trans      &kp F6         &kp F11       &kp F12       &kp F13        &trans          &trans          &tog RSE           &trans          &kp K_LOCK         &kp C_VOL_DN     &kp C_BRI_DN
                                                   &trans        &trans         &trans          &mkp LCLK       &mkp_ht LMETA RCLK &trans
                        > ;
                };
        };
};
