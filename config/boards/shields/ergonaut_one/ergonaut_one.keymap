/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF   0
#define EXTL  1
#define EXTR  2
#define SYML  3
#define SYMLE 4
#define SYMR  5
#define SYMRE 6
#define NAV   7
#define MOU   8
#define MOUX  9
#define FUN   10

#undef U_MOUSE_MOVE_MAX
#undef U_MOUSE_SCROLL_MAX

#define U_MOUSE_MOVE_MAX 3000
#define U_MOUSE_MOVE_FAST_MAX 3000
#define U_MOUSE_SCROLL_MAX 35

#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_X(U_MOUSE_MOVE_MAX)

#undef MOVE_UP_FAST
#undef MOVE_DOWN_FAST
#undef MOVE_LEFT_FAST
#undef MOVE_RIGHT_FAST
#define MOVE_UP_FAST MOVE_Y(-U_MOUSE_MOVE_FAST_MAX)
#define MOVE_DOWN_FAST MOVE_Y(U_MOUSE_MOVE_FAST_MAX)
#define MOVE_LEFT_FAST MOVE_X(-U_MOUSE_MOVE_FAST_MAX)
#define MOVE_RIGHT_FAST MOVE_X(U_MOUSE_MOVE_FAST_MAX)


#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define SCROLL_UP SCRL_Y(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCRL_Y(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCRL_X(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCRL_X(U_MOUSE_SCROLL_MAX)

#define HYPER(x) LC(LA(LS(LG(x))))

#define QUICK_TAP_MS 150
#define TAP_TERM_L_MS 200
#define TAP_TERM_M_MS 250
#define TAP_TERM_LONG_MS 650
 
#define KEYS_L 0 1 2 3 8 9 10 11 16 17 18  // left hand
#define KEYS_R 4 5 6 7 12 13 14 15 19 20 21  // right hand

/ {
    combos {
        compatible = "zmk,combos";
        combo_ret {
			timeout-ms = <80>;
			key-positions = <20 21>;
            layers = <DEF EXTL EXTR NAV MOU MOUX>; 
			bindings = <&kp RET>;
		};
		combo_esc {
			timeout-ms = <80>;
			key-positions = <19 20>;
            layers = <DEF EXTL EXTR NAV MOU MOUX>;
			bindings = <&kp ESC>;
		};
		combo_def {
			timeout-ms = <80>;
			key-positions = <19 20 21>;
            layers = <DEF NAV MOU MOUX>;
			bindings = <&to DEF>;
		};
	};
};
/ { 
	behaviors { 
        lmht: lmht { 
		    compatible = "zmk,behavior-hold-tap"; 
            #binding-cells = <2>; 
		    flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_M_MS>; 
            hold-trigger-key-positions = <KEYS_R>; 
            bindings = <&kp>, <&kp>; 
        }; 
        rmht: rmht { 
            compatible = "zmk,behavior-hold-tap"; 
			#binding-cells = <2>; 
            flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_M_MS>; 
            hold-trigger-key-positions = <KEYS_L>; 
            bindings = <&kp>, <&kp>; 
        };
        lmhts: lmhts { 
            compatible = "zmk,behavior-hold-tap"; 
			#binding-cells = <2>; 
            flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_M_MS>; 
            hold-trigger-key-positions = <KEYS_R>; 
            bindings = <&kp>, <&kp>; 
        }; 
        rmhts: rmhts { 
            compatible = "zmk,behavior-hold-tap"; 
			#binding-cells = <2>; 
            flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_M_MS>; 
            hold-trigger-key-positions = <KEYS_L>; 
            bindings = <&kp>, <&kp>; 
        };
        llht: llht { 
            compatible = "zmk,behavior-hold-tap"; 
			#binding-cells = <2>; 
            flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_L_MS>; 
            bindings = <&mo>, <&kp>; 
        }; 
        llhtl: llhtl { 
            compatible = "zmk,behavior-hold-tap"; 
			#binding-cells = <2>; 
            flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_LONG_MS>; 
            bindings = <&mo>, <&kp>; 
        }; 
        lltg: lltg { 
            compatible = "zmk,behavior-hold-tap"; 
			#binding-cells = <2>; 
            flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_L_MS>; 
            bindings = <&tog>, <&kp>; 
        }; 
        cw: cw { 
            compatible = "zmk,behavior-hold-tap"; 
			#binding-cells = <2>; 
            flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_L_MS>; 
            quick-tap-ms = <QUICK_TAP_MS>; 
            bindings = <&caps_word>, <&kp>; 
        }; 
        rlht: rlht { 
            compatible = "zmk,behavior-hold-tap"; 
			#binding-cells = <2>; 
            flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_L_MS>; 
            bindings = <&mo>, <&kp>; 
        }; 
        rlhtl: rlhtl { 
            compatible = "zmk,behavior-hold-tap"; 
			#binding-cells = <2>; 
            flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_LONG_MS>; 
            bindings = <&mo>, <&kp>; 
        }; 

        mkpht: mkpht { 
            compatible = "zmk,behavior-hold-tap"; 
			#binding-cells = <2>; 
            flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_L_MS>; 
            quick-tap-ms = <QUICK_TAP_MS>; 
            bindings = <&mo>, <&mkp>; 
        }; 
        vbup: vbup{ 
            compatible = "zmk,behavior-mod-morph"; 
            #binding-cells = <0>; 
            bindings = <&kp C_VOL_UP>, <&kp C_BRI_UP>; 
            mods = <(MOD_LSFT)>; 
        }; 
        vbdn: vbdn{ 
            compatible = "zmk,behavior-mod-morph"; 
            #binding-cells = <0>; 
            bindings = <&kp C_VOL_DN>, <&kp C_BRI_DN>; 
            mods = <(MOD_LSFT)>; 
        }; 
    }; 
};

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
        // zmk,matrix_transform = &five_column_transform;
     };


};

&mmv {
    time-to-max-speed-ms = <300>;
    acceleration-exponent = <1>;
};

&msc {
    time-to-max-speed-ms = <0>;
    acceleration-exponent = <1>;
};

&lt { quick_tap_ms = <TAP_TERM_L_MS>; };
&mt { quick_tap_ms = <TAP_TERM_M_MS>; };

/ {
        keymap {
                compatible = "zmk,keymap";
                default_layer {
			label = "main";
                        bindings = <
&lmhts LSHFT A  &kp W           &llht MOU F   &llht NAV P     &lltg MOU L     &rlht FUN U   &lltg NAV Y        &rmhts LSHFT I
&kp Z           &lmht LMETA R   &llht SYMR S  &llhtl EXTL T   &rlhtl EXTR N   &rlht SYML E  &rmht LMETA O      &kp Q
                &lmht LCTRL X   &kp C         &lmht LALT V    &rmht LALT M    &kp BSPC      &rmht LCTRL SPACE
                 >;
         };
         default_ext_left_layer {
 	label = "main ext left";
                 bindings = <
&trans  &trans  &kp F  &trans  &kp J  &kp U    &kp Y    &kp Z
&trans  &trans  &kp S  &trans  &kp H  &kp E    &kp O    &cw LSHFT I
        &trans  &kp C  &trans  &kp K  &kp DEL  &kp SPACE
                 >;
         }; 
         default_ext_right_layer {
 	label = "main ext right";
                 bindings = <
&kp Q  &kp W  &kp F  &kp G  &trans  &kp U  &trans  &trans
&kp A  &kp R  &kp S  &kp D  &trans  &kp E  &trans  &trans
       &kp X  &kp C  &kp B  &trans  &trans &trans
                 >;
         };
		 
 symbol_left_layer {
 	label = "symbol left";
                 bindings = <
&kp GRAVE  &kp BSLH  &kp DLLR  &kp AT     &trans         &trans    &trans  &trans
&kp COLON  &kp EQUAL &kp DQT   &kp SQT    &rlht SYMLE N  &trans    &trans  &trans
           &kp PIPE  &kp AMPS  &kp HASH   &trans         &trans    &trans
                 > ;
         };

 symbol_left_ext_layer {
 	label = "symbol left ext";
                 bindings = <
&kp N0   &kp N1  &kp N2  &kp N3   &trans  &trans  &trans  &trans
&kp SEMI &kp N4  &kp N5  &kp N6   &trans  &trans  &trans  &trans
         &kp N7  &kp N8  &kp N9   &trans  &trans  &trans
                 > ;
         };

 symbol_right_layer {
 	label = "symbol right";
                bindings = <
&trans   &trans  &trans  &trans          &kp LPAR  &kp RPAR   &kp QMARK  &kp UNDER
&trans   &trans  &trans  &llht SYMRE T   &kp DOT   &kp COMMA  &kp FSLH   &kp MINUS
         &trans  &trans  &trans          &kp LT    &kp GT     &trans
                 >;
         };

 symbol_right_ext_layer {
 	label = "symbol right ext";
                bindings = <
&trans   &trans   &trans  &trans   &kp LBRC  &kp RBRC   &kp EXCL  &kp PRCNT
&trans   &trans   &trans  &trans   &kp TAB   &kp CARET  &kp STAR  &kp PLUS 
         &trans   &trans  &trans   &kp LBKT  &kp RBKT   &kp TILDE
                 >;
         };

 navigation_layer {
 	label = "navigation";
                 bindings = <
&trans  &trans   &trans   &trans   &kp PG_DN  &kp UP     &kp PG_UP   &vbup
&trans  &trans   &to DEF  &trans   &kp LEFT   &kp DOWN   &kp RIGHT   &vbdn
        &trans   &trans   &trans   &kp HOME   &kp END    &trans
                 >;
         };

         mouse_layer {
 	label = "mouse";
                 bindings = <
&kp LG(Q)  &kp LG(W)  &trans     &lmht LSHFT LG(P)   &msc SCROLL_DOWN   &mmv MOVE_UP    &msc SCROLL_UP   &mkpht MOUX RCLK
&kp LG(A)  &kp LG(R)  &to DEF    &llht MOUX LG(T)    &mmv MOVE_LEFT     &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp LCLK       
           &kp LG(X)  &kp LG(C)  &kp LG(V)           &kp LG(M)          &trans          &trans
                 > ;
         };


         mouse_ext_layer {
 	label = "mouse ext";
                 bindings = <
&trans  &trans  &trans  &trans   &kp LG(T)  &kp LC(UP)   &kp LG(W)  &trans
&trans  &trans  &trans  &trans   &kp LG(N)  &kp LC(DOWN) &kp LG(O)  &trans
        &trans  &trans  &trans   &kp LEFT   &kp LG(R)    &kp RIGHT
                 > ;
         };

         fun_layer {
 	label = "function";
                 bindings = <
&kp F11  &kp F1  &kp F2  &kp F3   &trans  &trans  &trans  &trans   
&kp F10  &kp F4  &kp F5  &kp F6   &trans  &trans  &trans  &trans   
         &kp F7  &kp F8  &kp F9   &trans  &trans  &trans   
                        > ;
                };
        };
};
