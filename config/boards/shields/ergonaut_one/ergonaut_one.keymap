/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF   0
#define EXTL  1
#define EXTR  2
#define SYML  3
#define SYMLE 4
#define SYMR  5
#define SYMRE 6
#define NAV   7
#define MOU   8
#define MOUW  9
#define FUN   10

#undef U_MOUSE_MOVE_MAX
#undef U_MOUSE_SCROLL_MAX

#define U_MOUSE_MOVE_MAX 800
#define U_MOUSE_SCROLL_MAX 35

#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_X(U_MOUSE_MOVE_MAX)

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define SCROLL_UP SCRL_Y(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCRL_Y(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCRL_X(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCRL_X(U_MOUSE_SCROLL_MAX)

#define ZMK_HELPER_STRINGIFY(x) #x

#define ZMK_BEHAVIOR_CORE_caps_word   compatible = "zmk,behavior-caps-word";  #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_hold_tap    compatible = "zmk,behavior-hold-tap";   #binding-cells = <2>
#define ZMK_BEHAVIOR_CORE_key_repeat  compatible = "zmk,behavior-key-repeat"; #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_macro       compatible = "zmk,behavior-macro";      #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_mod_morph   compatible = "zmk,behavior-mod-morph";  #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_sticky_key  compatible = "zmk,behavior-sticky-key"; #binding-cells = <1>
#define ZMK_BEHAVIOR_CORE_tap_dance   compatible = "zmk,behavior-tap-dance";  #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_tri_state   compatible = "zmk,behavior-tri-state";  #binding-cells = <0>

#define ZMK_BEHAVIOR(name, type, ...) \
    / { \
        behaviors { \
            name: name { \
                ZMK_BEHAVIOR_CORE_ ## type; \
                __VA_ARGS__ \
            }; \
        }; \
    };


#define HYPER(x) LC(LA(LS(LG(x))))

#define QUICK_TAP_MS 150
#define TAP_TERM_L_MS 200
#define TAP_TERM_M_MS 250
 
#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29  // left hand
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35  // right hand
 { 
    behaviors { 
        lmht: lmht { 
            compatible = "zmk,behavior-hold-tap"; 
			#binding-cells = <2>; 
            flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_M_MS>; 
            quick-tap-ms = <QUICK_TAP_MS>; 
            hold-trigger-key-positions = <KEYS_R>; 
            bindings = <&kp>, <&kp>; 
        }; 
        rmht: rmht { 
            compatible = "zmk,behavior-hold-tap"; 
			#binding-cells = <2>; 
            flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_M_MS>; 
            quick-tap-ms = <QUICK_TAP_MS>; 
            hold-trigger-key-positions = <KEYS_L>; 
            bindings = <&kp>, <&kp>; 
        }; 
        llht: llht { 
            compatible = "zmk,behavior-hold-tap"; 
			#binding-cells = <2>; 
            flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_L_MS>; 
            quick-tap-ms = <QUICK_TAP_MS>; 
            bindings = <&mo>, <&kp>; 
        }; 
        rlht: rlht { 
            compatible = "zmk,behavior-hold-tap"; 
			#binding-cells = <2>; 
            flavor = "balanced"; 
            tapping-term-ms = <TAP_TERM_L_MS>; 
            quick-tap-ms = <QUICK_TAP_MS>; 
            bindings = <&mo>, <&kp>; 
        }; 
    }; 
};

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
        // zmk,matrix_transform = &five_column_transform;
     };


};

&mmv {
    time-to-max-speed-ms = <80>;
    acceleration-exponent = <1>;
};

&msc {
    time-to-max-speed-ms = <0>;
    acceleration-exponent = <1>;
};

&lt { quick_tap_ms = <TAP_TERM_L_MS>; };
&mt { quick_tap_ms = <TAP_TERM_M_MS>; };


/ {
        keymap {
                compatible = "zmk,keymap";
                default_layer {
			label = "main";
                        bindings = <
&none  &none   &kp W           &llht NAV F   &lmht LSHFT P  &none  &none  &rmht LSHFT L  &rlht FUN U   &kp Y              &none   &none
&none  &kp Q   &lmht LMETA R   &llht SYMR S  &llht EXTL T   &none  &none  &rlht EXTR N   &rlht SYML E  &rmht LMETA O      &kp Z   &none
&none  &kp A   &lmht LCTRL X   &llht MOU C   &lmht LALT V   &none  &none  &rmht LALT M   &kp RET       &rmht LCTRL SPACE  &kp I   &none
&none &none &none &none &none &none
                        >;
                };

                default_ext_left_layer {
			label = "main ext left";
                        bindings = <
&none  &none   &trans  &trans  &trans  &none  &none  &kp J  &kp U   &kp Y      &none   &none
&none  &trans  &trans  &trans  &trans  &none  &none  &kp H  &kp E   &kp O      &kp Z   &none
&none  &trans  &trans  &trans  &trans  &none  &none  &kp K  &kp RET &kp SPACE  &kp I   &none
&none &none &none &none &none &none
                        >;
                };

                default_ext_right_layer {
			label = "main ext right";
                        bindings = <
&none  &none   &kp W   &kp F   &kp G   &none  &none  &trans   &trans  &trans  &none    &none
&none  &kp Q   &kp R   &kp S   &kp D   &none  &none  &trans   &trans  &trans  &trans   &none
&none  &kp A   &kp X   &kp C   &kp B   &none  &none  &trans   &trans  &trans  &trans   &none
&none &none &none &none &none &none
                        >;
                };

        symbol_left_layer {
			label = "symbol left";
                        bindings = <
&trans   &trans     &kp SEMI  &kp DLLR  &kp AT     &trans   &trans   &trans         &trans    &trans  &trans   &trans   
&trans   &kp GRAVE  &kp TAB   &kp ESC   &kp BSPC   &trans   &trans   &rlht SYMLE N  &trans    &trans  &trans   &trans   
&trans   &kp DEL    &kp PIPE  &kp AMPS  &kp HASH   &trans   &trans   &trans         &trans    &trans  &trans   &trans   
&none &none &none &none &none &none
                        > ;
                };

        symbol_left_ext_layer {
			label = "symbol left ext";
                        bindings = <
&trans   &trans     &mt BSLH N1  &mt TILDE N2  &mt CARET N3     &trans     &trans   &trans &trans    &trans  &trans   &trans   
&trans   &kp N0  &kp N4   &kp N5   &kp N6   &trans     &trans   &trans &trans    &trans  &trans   &trans   
&trans   &trans    &kp N7  &kp N8  &kp N9   &trans     &trans   &trans &trans    &trans  &trans   &trans   
&none &none &none &none &none &none
                        > ;
                };

		symbol_right_layer {
			label = "symbol right";
                       bindings = <
&trans   &trans   &trans   &trans   &trans         &trans   &none    &kp LPAR  &kp RPAR   &kp QMARK  &none      &trans   
&trans   &trans   &trans   &trans   &llht SYMRE N  &trans   &none    &kp DOT   &kp COMMA  &kp FSLH   &kp UNDER  &trans   
&trans   &trans   &trans   &trans   &trans         &trans   &none    &kp LT    &kp GT     &kp SQT    &kp MINUS  &trans   
&none &none &none &none &none &none
                        >;
                };


		navigation_layer {
			label = "navigation";
                        bindings = <
&trans   &trans   &trans  &trans   &trans  &trans   &trans   &kp PG_DN  &kp UP     &kp PG_UP   &trans  &trans   
&trans   &trans   &trans  &trans   &trans  &trans   &trans   &kp LEFT   &kp DOWN   &kp RIGHT   &volup  &trans   
&trans   &trans   &trans  &trans   &trans  &trans   &trans   &kp HOME   &trans     &kp END     &voldn  &trans   
&none &none &none &none &none &none
                        >;
                };

                mouse_layer {
			label = "mouse";
                        bindings = <
&trans   &trans   &trans  &trans  &trans           &trans   &trans   &kp HYPER(A)    &mmv MOVE_UP    &kp HYPER(G)     &trans   &trans   
&trans   &trans   &trans  &trans  &llht MOUW RCLK  &trans   &trans   &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans   &trans   
&trans   &trans   &trans  &trans  &kp LCLK         &trans   &trans   &kp HYPER(C)    &kp HYPER(E)    &kp HYPER(K)     &trans   &trans   
&none &none &none &none &none &none
                        > ;
                };


                mouse_wheel_layer {
			label = "mouse wheel";
                        bindings = <
&trans   &trans   &trans  &trans  &trans  &trans   &trans   &trans          &mmv MOVE_UP    &trans           &trans   &trans   
&trans   &trans   &trans  &trans  &trans  &trans   &trans   &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans   &trans   
&trans   &trans   &trans  &trans  &trans  &trans   &trans   &trans          &trans          &trans           &trans   &trans   
&none &none &none &none &none &none
                        > ;
                };

                fun_layer {
			label = "function";
                        bindings = <
&trans   &trans   &kp F1  &kp F2  &kp F3  &trans     &trans   &trans  &trans  &trans  &trans  &trans   
&trans   &kp F11  &kp F4  &kp F5  &kp F6  &trans     &trans   &trans  &trans  &trans  &trans  &trans   
&trans   &kp F10  &kp F7  &kp F8  &kp F9  &trans     &trans   &trans  &trans  &trans  &trans  &trans   
&none &none &none &none &none &none
                        > ;
                };
        };
};
