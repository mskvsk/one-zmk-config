/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF  0
#define SYM  1
#define SYM2 2
#define NAV  3
#define MOU  4

#undef U_MOUSE_MOVE_MAX
#undef U_MOUSE_SCROLL_MAX

#define U_MOUSE_MOVE_MAX 800
#define U_MOUSE_SCROLL_MAX 35

#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_X(U_MOUSE_MOVE_MAX)

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define SCROLL_UP SCRL_Y(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCRL_Y(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCRL_X(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCRL_X(U_MOUSE_SCROLL_MAX)

#define ZMK_HELPER_STRINGIFY(x) #x

#define ZMK_BEHAVIOR_CORE_caps_word   compatible = "zmk,behavior-caps-word";  #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_hold_tap    compatible = "zmk,behavior-hold-tap";   #binding-cells = <2>
#define ZMK_BEHAVIOR_CORE_key_repeat  compatible = "zmk,behavior-key-repeat"; #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_macro       compatible = "zmk,behavior-macro";      #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_mod_morph   compatible = "zmk,behavior-mod-morph";  #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_sticky_key  compatible = "zmk,behavior-sticky-key"; #binding-cells = <1>
#define ZMK_BEHAVIOR_CORE_tap_dance   compatible = "zmk,behavior-tap-dance";  #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_tri_state   compatible = "zmk,behavior-tri-state";  #binding-cells = <0>

#define ZMK_BEHAVIOR(name, type, ...) \
    / { \
        behaviors { \
            name: name { \
                label = ZMK_HELPER_STRINGIFY(ZB_ ## name); \
                ZMK_BEHAVIOR_CORE_ ## type; \
                __VA_ARGS__ \
            }; \
        }; \
    };

/ {
    combos {
        compatible = "zmk,combos";
        combo_left_rals {
            timeout-ms = <150>;
            key-positions = <4 16>;
            bindings = <&kp RA(LSHFT)>;
        };
        combo_right_rals {
            timeout-ms = <150>;
            key-positions = <7 19>;
            bindings = <&kp RA(LSHFT)>;
        };
    };
};

#define HYPER(x) LC(LA(LS(LG(x))))

#define QUICK_TAP_MS 175
#define TAP_TERM_MS 300
 
#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29  // left hand
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35  // right hand
#define KEYS_MOD_L 14 15 16
#define KEYS_MOD_R 19 20 21 

ZMK_BEHAVIOR(m_st, macro, bindings = <&macro_tap &kp S &kp T>;)
ZMK_BEHAVIOR(m_sr, macro, bindings = <&macro_tap &kp S &kp R>;)
ZMK_BEHAVIOR(m_sa, macro, bindings = <&macro_tap &kp S &kp A>;)
ZMK_BEHAVIOR(m_en, macro, bindings = <&macro_tap &kp E &kp N>;)
ZMK_BEHAVIOR(m_eo, macro, bindings = <&macro_tap &kp E &kp O>;)
ZMK_BEHAVIOR(m_ei, macro, bindings = <&macro_tap &kp E &kp I>;)
/ { 
behaviors { 
            st_ht: st_ht { \
                compatible = "zmk,behavior-hold-tap"; 
				#binding-cells = <2>; 
                label = ZMK_HELPER_STRINGIFY(ST_HT); 
                flavor = "balanced"; 
	            tapping-term-ms = <TAP_TERM_MS>; 
                quick-tap-ms = <QUICK_TAP_MS>; 
                hold-trigger-key-positions = <KEYS_R>; 
                bindings = <&kp>, <&m_st>; 
            }; 
            sr_ht: sr_ht { \
                compatible = "zmk,behavior-hold-tap"; 
				#binding-cells = <2>; 
                label = ZMK_HELPER_STRINGIFY(SR_HT); 
                flavor = "balanced"; 
	            tapping-term-ms = <TAP_TERM_MS>; 
                quick-tap-ms = <QUICK_TAP_MS>; 
                hold-trigger-key-positions = <KEYS_R>; 
                bindings = <&kp>, <&m_sr>; 
            }; 
            en_ht: en_ht { \
                compatible = "zmk,behavior-hold-tap"; 
				#binding-cells = <2>; 
                label = ZMK_HELPER_STRINGIFY(EN_HT); 
                flavor = "balanced"; 
	            tapping-term-ms = <TAP_TERM_MS>; 
                quick-tap-ms = <QUICK_TAP_MS>; 
                hold-trigger-key-positions = <KEYS_L>; 
                bindings = <&kp>, <&m_en>; 
            }; 
            eo_ht: eo_ht { \
                compatible = "zmk,behavior-hold-tap"; 
				#binding-cells = <2>; 
                label = ZMK_HELPER_STRINGIFY(EO_HT); 
                flavor = "balanced"; 
	            tapping-term-ms = <TAP_TERM_MS>; 
                quick-tap-ms = <QUICK_TAP_MS>; 
                hold-trigger-key-positions = <KEYS_L>; 
                bindings = <&kp>, <&m_eo>; 
            }; 
    };
    };

#define MM_SHIFT_LALT_RALT_LHT(name, none, s, la, ra) \
    / { \
        behaviors { \
            name ## _S: name ## _S{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARALHT_ ## name ## _S); \
                #binding-cells = <0>; \
                bindings = <none>, <s>; \
                mods = <(MOD_LSFT)>; \
            }; \
            name ## _LA: name ## _LA{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARALHT_ ## name ## _LA); \
                #binding-cells = <0>; \
                bindings = <&name ## _S>, <la>; \
                mods = <(MOD_LALT)>; \
            }; \
            name ## _RA: name ## _RA{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARALHT_ ## name ## _RA); \
                #binding-cells = <0>; \
                bindings = <&name ## _LA>, <ra>; \
                mods = <(MOD_RALT)>; \
            }; \
            name: name { \
                compatible = "zmk,behavior-hold-tap"; \
				#binding-cells = <2>; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARALHT_ ## name); \
                flavor = "balanced"; \
	            tapping-term-ms = <TAP_TERM_MS>; \
                quick-tap-ms = <QUICK_TAP_MS>; \
                hold-trigger-key-positions = <KEYS_R>; \
                bindings = <&kp>, <&name ## _RA>; \
            }; \
        }; \
    };

#define MM_SHIFT_RALT_LHT(name, none, s, ra) \
    / { \
        behaviors { \
            name ## _S: name ## _S{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SRALHT_ ## name ## _S); \
                #binding-cells = <0>; \
                bindings = <none>, <s>; \
                mods = <(MOD_LSFT)>; \
            }; \
            name ## _RA: name ## _RA{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SRALHT_ ## name ## _RA); \
                #binding-cells = <0>; \
                bindings = <&name ## _S>, <ra>; \
                mods = <(MOD_RALT)>; \
            }; \
            name: name { \
                compatible = "zmk,behavior-hold-tap"; \
				#binding-cells = <2>; \
                label = ZMK_HELPER_STRINGIFY(MM_SRALHT_ ## name); \
                flavor = "balanced"; \
	            tapping-term-ms = <TAP_TERM_MS>; \
                quick-tap-ms = <QUICK_TAP_MS>; \
                hold-trigger-key-positions = <KEYS_R>; \
                bindings = <&kp>, <&name ## _RA>; \
            }; \
        }; \
    };

#define MM_SHIFT_RALT_RHT(name, none, s, ra) \
    / { \
        behaviors { \
            name ## _S: name ## _S{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SRALHT_ ## name ## _S); \
                #binding-cells = <0>; \
                bindings = <none>, <s>; \
                mods = <(MOD_LSFT)>; \
            }; \
            name ## _RA: name ## _RA{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SRALHT_ ## name ## _RA); \
                #binding-cells = <0>; \
                bindings = <&name ## _S>, <ra>; \
                mods = <(MOD_RALT)>; \
            }; \
            name: name { \
                compatible = "zmk,behavior-hold-tap"; \
				#binding-cells = <2>; \
                label = ZMK_HELPER_STRINGIFY(MM_SRARHT_ ## name); \
                flavor = "balanced"; \
	            tapping-term-ms = <TAP_TERM_MS>; \
                quick-tap-ms = <QUICK_TAP_MS>; \
                hold-trigger-key-positions = <KEYS_L>; \
                bindings = <&kp>, <&name ## _RA>; \
            }; \
        }; \
    };

#define LT_SHIFT_RALT_LHT(name, none, s, ra) \
    / { \
        behaviors { \
            name ## _S: name ## _S{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(LT_SRALHT_ ## name ## _S); \
                #binding-cells = <0>; \
                bindings = <none>, <s>; \
                mods = <(MOD_LSFT)>; \
            }; \
            name ## _RA: name ## _RA{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(LT_SRALHT_ ## name ## _RA); \
                #binding-cells = <0>; \
                bindings = <&name ## _S>, <ra>; \
                mods = <(MOD_RALT)>; \
            }; \
            name: name { \
                compatible = "zmk,behavior-hold-tap"; \
				#binding-cells = <2>; \
                label = ZMK_HELPER_STRINGIFY(LT_SRALHT_ ## name); \
                flavor = "tap-preferred"; \
	            tapping-term-ms = <200>; \
                bindings = <&mo>, <&name ## _RA>; \
            }; \
        }; \
    };

#define MM_SHIFT_RALT_LHT_NOQT(name, none, s, ra) \
    / { \
        behaviors { \
            name ## _S: name ## _S{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SRALHT_ ## name ## _S); \
                #binding-cells = <0>; \
                bindings = <none>, <s>; \
                mods = <(MOD_LSFT)>; \
            }; \
            name ## _RA: name ## _RA{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SRALHT_ ## name ## _RA); \
                #binding-cells = <0>; \
                bindings = <&name ## _S>, <ra>; \
                mods = <(MOD_RALT)>; \
            }; \
            name: name { \
                compatible = "zmk,behavior-hold-tap"; \
				#binding-cells = <2>; \
                label = ZMK_HELPER_STRINGIFY(MM_SRALHT_ ## name); \
                flavor = "balanced"; \
	            tapping-term-ms = <TAP_TERM_MS>; \
                hold-trigger-key-positions = <KEYS_R>; \
                bindings = <&kp>, <&name ## _RA>; \
            }; \
        }; \
    };

#define MM_SHIFT_LALT_RALT_RHT(name, none, s, la, ra) \
    / { \
        behaviors { \
            name ## _S: name ## _S{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARAHT_ ## name ## _S); \
                #binding-cells = <0>; \
                bindings = <none>, <s>; \
                mods = <(MOD_LSFT)>; \
            }; \
            name ## _LA: name ## _LA{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARAHT_ ## name ## _LA); \
                #binding-cells = <0>; \
                bindings = <&name ## _S>, <la>; \
                mods = <(MOD_LALT)>; \
            }; \
            name ## _RA: name ## _RA{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARAHT_ ## name ## _RA); \
                #binding-cells = <0>; \
                bindings = <&name ## _LA>, <ra>; \
                mods = <(MOD_RALT)>; \
            }; \
            name: name { \
                compatible = "zmk,behavior-hold-tap"; \
				#binding-cells = <2>; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARAHT_ ## name); \
                flavor = "balanced"; \
	            tapping-term-ms = <TAP_TERM_MS>; \
                quick-tap-ms = <QUICK_TAP_MS>; \
                hold-trigger-key-positions = <KEYS_L>; \
                bindings = <&kp>, <&name ## _RA>; \
            }; \
        }; \
    };

#define MM_SHIFT_LALT_RALT_RHT_NOQT(name, none, s, la, ra) \
    / { \
        behaviors { \
            name ## _S: name ## _S{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARAHT_ ## name ## _S); \
                #binding-cells = <0>; \
                bindings = <none>, <s>; \
                mods = <(MOD_LSFT)>; \
            }; \
            name ## _LA: name ## _LA{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARAHT_ ## name ## _LA); \
                #binding-cells = <0>; \
                bindings = <&name ## _S>, <la>; \
                mods = <(MOD_LALT)>; \
            }; \
            name ## _RA: name ## _RA{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARAHT_ ## name ## _RA); \
                #binding-cells = <0>; \
                bindings = <&name ## _LA>, <ra>; \
                mods = <(MOD_RALT)>; \
            }; \
            name: name { \
                compatible = "zmk,behavior-hold-tap"; \
				#binding-cells = <2>; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARAHT_ ## name); \
                flavor = "balanced"; \
	            tapping-term-ms = <TAP_TERM_MS>; \
                hold-trigger-key-positions = <KEYS_L>; \
                bindings = <&kp>, <&name ## _RA>; \
            }; \
        }; \
    };
#define MM_SHIFT_LALT_RHT(name, none, s, la) \
    / { \
        behaviors { \
            name ## _S: name ## _S{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLAHT_ ## name ## _S); \
                #binding-cells = <0>; \
                bindings = <none>, <s>; \
                mods = <(MOD_LSFT)>; \
            }; \
            name ## _LA: name ## _LA{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLAHT_ ## name ## _LA); \
                #binding-cells = <0>; \
                bindings = <&name ## _S>, <la>; \
                mods = <(MOD_LALT)>; \
            }; \
            name: name { \
                compatible = "zmk,behavior-hold-tap"; \
				#binding-cells = <2>; \
                label = ZMK_HELPER_STRINGIFY(MM_SLAHT_ ## name); \
                flavor = "balanced"; \
	            tapping-term-ms = <TAP_TERM_MS>; \
                quick-tap-ms = <QUICK_TAP_MS>; \
                hold-trigger-key-positions = <KEYS_L>; \
                bindings = <&kp>, <&name ## _LA>; \
            }; \
        }; \
    };


#define MM_SHIFT_LALT_RALT(name, none, s, la, ra) \
    / { \
        behaviors { \
            name ## _S: name ## _S{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARA_ ## name ## _S); \
                #binding-cells = <0>; \
                bindings = <none>, <s>; \
                mods = <(MOD_LSFT)>; \
            }; \
            name ## _LA: name ## _LA{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARA_ ## name ## _LA); \
                #binding-cells = <0>; \
                bindings = <&name ## _S>, <la>; \
                mods = <(MOD_LALT)>; \
            }; \
            name: name{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLARA_ ## name); \
                #binding-cells = <0>; \
                bindings = <&name ## _LA>, <ra>; \
                mods = <(MOD_RALT)>; \
            }; \
        }; \
    };

#define MM_SHIFT_LALT(name, none, s, la) \
    / { \
        behaviors { \
            name ## _S: name ## _S{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLA_ ## name ## _S); \
                #binding-cells = <0>; \
                bindings = <none>, <s>; \
                mods = <(MOD_LSFT)>; \
            }; \
            name: name{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SLA_ ## name); \
                #binding-cells = <0>; \
                bindings = <&name ## _S>, <la>; \
                mods = <(MOD_LALT)>; \
            }; \
        }; \
    };

#define MM_SHIFT_RALT(name, none, s, ra) \
    / { \
        behaviors { \
            name ## _S: name ## _S{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SRA_ ## name ## _S); \
                #binding-cells = <0>; \
                bindings = <none>, <s>; \
                mods = <(MOD_LSFT)>; \
            }; \
            name: name{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_SRA_ ## name); \
                #binding-cells = <0>; \
                bindings = <&name ## _S>, <ra>; \
                mods = <(MOD_RALT)>; \
            }; \
        }; \
    };

#define MM_SHIFT(name, none, s) \
    / { \
        behaviors { \
            name: name{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_S_ ## name); \
                #binding-cells = <0>; \
                bindings = <none>, <s>; \
                mods = <(MOD_LSFT)>; \
            }; \
        }; \
    };


#define MM_RALT_RHT(name, none, ra) \
    / { \
        behaviors { \
            name ## _RA: name ## _RA{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_RAT_ ## name ## _RA); \
                #binding-cells = <0>; \
                bindings = <none>, <ra>; \
                mods = <(MOD_RALT)>; \
            }; \
            name: name { \
                compatible = "zmk,behavior-hold-tap"; \
				#binding-cells = <2>; \
                label = ZMK_HELPER_STRINGIFY(MM_RAT_ ## name); \
                flavor = "balanced"; \
	            tapping-term-ms = <TAP_TERM_MS>; \
                quick-tap-ms = <QUICK_TAP_MS>; \
                hold-trigger-key-positions = <KEYS_L>; \
                bindings = <&kp>, <&name ## _RA>; \
            }; \
        }; \
    };


#define MM_LALT(name, none, la) \
    / { \
        behaviors { \
            name: name{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_LA_ ## name); \
                #binding-cells = <0>; \
                bindings = <none>, <la>; \
                mods = <(MOD_LALT)>; \
            }; \
        }; \
    };

#define MM_RALT(name, none, ra) \
    / { \
        behaviors { \
            name: name{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_RA_ ## name); \
                #binding-cells = <0>; \
                bindings = <none>, <ra>; \
                mods = <(MOD_RALT)>; \
            }; \
        }; \
    };

#define MM_RALT_LALT(name, none, ra, la) \
    / { \
        behaviors { \
            name ## _RA: name ## _RA{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_LARA_ ## name ## _RA); \
                #binding-cells = <0>; \
                bindings = <none>, <ra>; \
                mods = <(MOD_RALT)>; \
            }; \
            name: name{ \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(MM_LARA_ ## name); \
                #binding-cells = <0>; \
                bindings = <&name ## _RA>, <la>; \
                mods = <(MOD_LALT)>; \
            }; \
        }; \
    };

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
        // zmk,matrix_transform = &five_column_transform;
     };


};

&mmv {
    time-to-max-speed-ms = <80>;
    acceleration-exponent = <1>;
};

&msc {
    time-to-max-speed-ms = <0>;
    acceleration-exponent = <1>;
};

&lt { quick_tap_ms = <200>; };
&mt { quick_tap_ms = <200>; };

/* main */
MM_SHIFT_RALT(q, &kp Q, &kp LS(Q), &kp Q)
MM_SHIFT_RALT(a, &kp A, &kp LS(A), &kp A)

MM_SHIFT_RALT(w, &kp W, &kp LS(W), &kp W)
MM_SHIFT_RALT_LHT(r, &kp R, &kp LS(R), &kp R)
MM_SHIFT_RALT_LHT(x, &kp X, &kp LS(X), &kp X)

LT_SHIFT_RALT_LHT(f, &kp F, &kp LS(F), &kp F)
LT_SHIFT_RALT_LHT(s, &kp S, &kp LS(S), &kp S)
LT_SHIFT_RALT_LHT(c, &kp C, &kp LS(C), &kp C)

MM_SHIFT_RALT_LHT(p, &kp P, &kp LS(P), &kp G)
MM_SHIFT_RALT_LHT_NOQT(t, &kp T, &kp LS(T), &kp D)
MM_SHIFT_RALT_LHT(v, &kp V, &kp LS(V), &kp B)

MM_SHIFT_LALT_RALT(l, &kp L, &kp LS(L), &kp N1, &kp J)
MM_SHIFT_LALT_RALT_RHT_NOQT(n, &kp N, &kp LS(N), &kp N4, &kp H)
MM_SHIFT_LALT_RALT_RHT(m, &kp M, &kp LS(M), &kp N7, &kp K)

MM_SHIFT_LALT_RALT(u, &kp U, &kp LS(U), &kp N2, &kp U)
MM_SHIFT_LALT_RALT(e, &kp E, &kp LS(E), &kp N5, &kp E)
MM_SHIFT_LALT_RALT(comma, &kp COMMA, &kp QMARK, &kp N8, &kp COMMA)

MM_SHIFT_LALT_RALT(y, &kp Y, &kp LS(Y), &kp N3, &kp Y)
MM_SHIFT_LALT_RALT_RHT(o, &kp O, &kp LS(O), &kp N6, &kp O)
MM_SHIFT_RALT_RHT(space, &kp SPACE, &kp SPACE, &kp SPACE)

MM_SHIFT_LALT_RALT(z, &kp Z, &kp LS(Z), &kp N4, &kp UNDER)
MM_SHIFT_LALT_RALT(i, &kp I, &kp LS(I), &kp N8, &kp N0)

/* symbol */

MM_RALT(lpar, &kp LPAR, &kp LBRC)
MM_RALT(dot, &kp DOT, &kp COLON)
MM_RALT(lss, &kp LT, &kp LBKT)

MM_RALT(rpar, &kp RPAR, &kp RBRC)
MM_RALT(comma, &kp COMMA, &kp EQUAL)
MM_RALT(grt, &kp GT, &kp RBKT)

MM_RALT(qmark, &kp QMARK, &kp EXCL)
MM_RALT(fslh, &kp FSLH, &kp STAR)
MM_RALT(sqt, &kp SQT, &kp DQT)

MM_RALT(under, &kp UNDER, &kp PRCNT)
MM_RALT(minus, &kp MINUS, &kp PLUS)

/* symbol 2*/

MM_RALT(grave, &kp GRAVE, &kp N0)
MM_RALT(del, &kp DEL, &kp DEL)

MM_SHIFT_RALT(semi, &kp SEMI, &kp N1, &kp BSLH)
MM_RALT(tab, &kp TAB, &kp N4)
MM_RALT(pipe, &kp PIPE, &kp N7)

MM_SHIFT_RALT(dllr, &kp DLLR, &kp N2, &kp TILDE)
MM_RALT(esc, &kp ESC, &kp N5)
MM_RALT(amps, &kp AMPS, &kp N8)

MM_SHIFT_RALT(at, &kp AT, &kp N3, &kp CARET)
MM_RALT(bspc, &kp BSPC, &kp N6)
MM_RALT(hash, &kp HASH, &kp N9)

/* navigation */

MM_RALT(left, &kp LEFT, &kp HOME)

MM_RALT(up, &kp UP, &kp PG_UP)
MM_RALT(down, &kp DOWN, &kp PG_DN)

MM_RALT(right, &kp RIGHT, &kp END)

MM_RALT(volup, &kp C_VOL_UP, &kp C_BRI_UP)
MM_RALT(voldn, &kp C_VOL_DN, &kp C_BRI_DN)

/* mouse */

MM_RALT(mtl, &none, &kp HYPER(A))
MM_RALT_LALT(mleft, &mmv MOVE_LEFT, &kp HYPER(B), &msc SCROLL_LEFT)
MM_RALT_RHT(mbl, &none, &kp HYPER(C))

MM_RALT_LALT(mup, &mmv MOVE_UP, &kp HYPER(D), &msc SCROLL_UP)
MM_RALT_LALT(mdown, &mmv MOVE_DOWN, &kp HYPER(E), &msc SCROLL_DOWN)
MM_RALT(mbc, &none, &kp HYPER(F))

MM_RALT(mtr, &none, &kp HYPER(G))
MM_RALT_LALT(mright, &mmv MOVE_RIGHT, &kp HYPER(H), &msc SCROLL_RIGHT)
MM_RALT(mbr, &none, &kp HYPER(K))

MM_SHIFT(mbtn, &mkp LCLK, &mkp RCLK)

/ {
        keymap {
                compatible = "zmk,keymap";
                default_layer {
			label = "main";
                        bindings = <
&none  &none         &w            &f NAV F  &p LSHFT P &none  &none  &l LSHFT L  &u        &y                 &none       &none
&none  &q            &r LMETA R    &s SYM S  &t RALT T  &none  &none  &n RALT N   &e SYM2 E &o LMETA O         &z          &none
&none  &a            &x LCTRL X    &c MOU C  &v LALT V  &none  &none  &m LALT M   &kp RET    &space LCTRL SPACE &i          &none
&none &none &none &none &none &none
                        >;
                };

		symbol_layer {
			label = "symbol";
                       bindings = <
&trans   &trans   &trans            &trans   &trans          &trans   &none    &lpar   &rpar  &qmark  &none   &trans   
&trans   &trans   &sr_ht LMETA R    &trans   &st_ht RALT T   &trans   &none    &dot   &comma   &fslh &under   &trans   
&trans   &m_sa    &trans            &trans   &trans          &trans   &none    &lss    &grt   &sqt    &minus    &trans   
&none &none &none &none &none &none
                        >;
                };

        symbol2_layer {
			label = "symbol2";
                        bindings = <
&trans   &trans   &semi  &dllr  &at     &trans     &trans   &trans      &trans    &trans       &trans   &trans   
&trans   &grave   &tab  &esc  &bspc     &trans     &trans   &en_ht RALT N  &trans    &eo_ht LMETA O  &trans   &trans   
&trans   &del      &pipe  &amps  &hash     &trans     &trans   &trans      &trans    &trans       &trans   &trans   
&none &none &none &none &none &none
                        > ;
                };

		navigation_layer {
			label = "navigation";
                        bindings = <
&trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans &up     &trans      &trans  &trans   
&trans   &trans   &trans   &trans   &trans   &trans   &trans   &left   &down   &right       &volup  &trans   
&trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans  &trans  &trans   &voldn  &trans   
&none &none &none &none &none &none
                        >;
                };

                mouse_layer {
			label = "mouse";
                        bindings = <
&trans   &trans   &trans      &trans  &trans     &trans     &trans   &mtl          &mup    &mtr     &trans   &trans   
&trans   &trans   &trans      &trans  &trans     &trans     &trans   &mleft        &mdown  &mright  &trans   &trans   
&trans   &trans   &mt LALT X  &trans  &mbtn      &trans     &trans   &mbl LSHFT M  &mbc    &mbr     &trans   &trans   
&none &none &none &none &none &none
                        > ;
                };
        };
};
